
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\Pre-Processing\plot_SQI_pandas.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_Pre-Processing_plot_SQI_pandas.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_Pre-Processing_plot_SQI_pandas.py:


PPG Pre-processing and SQI Calculations using Pandas
====================================================

Trimming, Filtering, Segmentation and SQI Calculations utilising Pandas

.. GENERATED FROM PYTHON SOURCE LINES 8-14

.. code-block:: default
   :lineno-start: 9


    # Code Adapted from:
    # https://meta00.github.io/vital_sqi/_examples/others/plot_pipeline_02.html
    # AND
    # https://meta00.github.io/vital_sqi/_examples/others/plot_read_signal.html#sphx-glr-examples-others-plot-read-signal-py








.. GENERATED FROM PYTHON SOURCE LINES 15-22

.. code-block:: default
   :lineno-start: 16


    '''
    This file will be used in calculating the SQIs for each patient (and discarding parts of the signal soon).
    A loop will be implemented in future iterations for the different patiend files. In general, the file is built
    parametrically so that the procedure can be automated.

    '''




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '\nThis file will be used in calculating the SQIs for each patient (and discarding parts of the signal soon).\nA loop will be implemented in future iterations for the different patiend files. In general, the file is built\nparametrically so that the procedure can be automated.\n\n'



.. GENERATED FROM PYTHON SOURCE LINES 23-24

Importing Libraries

.. GENERATED FROM PYTHON SOURCE LINES 24-43

.. code-block:: default
   :lineno-start: 25


    # Generic
    import os
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    from scipy import signal

    # Scipy
    from scipy.stats import skew, kurtosis, entropy

     # vitalSQI
    from vital_sqi.data.signal_io import PPG_reader
    import vital_sqi.highlevel_functions.highlevel as sqi_hl
    import vital_sqi.data.segment_split as sqi_sg
    from vital_sqi.common.rpeak_detection import PeakDetector
    from vital_sqi.preprocess.band_filter import BandpassFilter
    import vital_sqi.sqi as sq








.. GENERATED FROM PYTHON SOURCE LINES 44-45

Loading data

.. GENERATED FROM PYTHON SOURCE LINES 45-79

.. code-block:: default
   :lineno-start: 47



    # Filepath definition
    filepath = r'..\..\..\..\OUCRU\01NVa_Dengue\Adults\01NVa-003-2001\PPG'
    filename = r'01NVa-003-2001 Smartcare.csv'


    #defining constants
    trim_amount = 300
    hp_filt_params = (1, 1) #(Hz, order)
    lp_filt_params = (20, 4) #(Hz, order)
    filter_type =  'butter'
    segment_length = 30
    sampling_rate = 100

    #readind PPG data
    data = PPG_reader(os.path.join(filepath, filename), 
        signal_idx=["PLETH", "IR_ADC"],
        timestamp_idx=["TIMESTAMP_MS"],
        info_idx=["SPO2_PCT","PULSE_BPM","PERFUSION_INDEX"], sampling_rate=sampling_rate)


    print(data)
    print(data.signals)
    print(data.sampling_rate)
    print(data.start_datetime)
    print(data.wave_type)
    print(data.signals.shape)


    plot_range = np.arange(0,1000,1)
    fig, ax = plt.subplots()
    ax.plot(plot_range, data.signals[0][0:1000])




.. image:: /_examples/Pre-Processing/images/sphx_glr_plot_SQI_pandas_001.png
    :alt: plot SQI pandas
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <vital_sqi.data.signal_sqi_class.SignalSQI object at 0x000001F097B0A040>
    [[ 36033  40919  45715 ...  31117  30761  30261]
     [216524 216470 216415 ... 184296 184554 184828]]
    100
    None
    ppg
    (2, 5626377)

    [<matplotlib.lines.Line2D object at 0x000001F09795F190>]



.. GENERATED FROM PYTHON SOURCE LINES 80-81

Setting the indexes for the raw data - adopted from examples

.. GENERATED FROM PYTHON SOURCE LINES 81-108

.. code-block:: default
   :lineno-start: 81

    pd.Timedelta.__str__ = lambda x: x._repr_base('all')

    #Transposing data.signals to set into columns
    signals = pd.DataFrame(data.signals.T)

    # Include column with index
    signals = signals.reset_index()


    signals['timedelta'] = \
        pd.to_timedelta(signals.index / sampling_rate, unit='s')

    # Set the timedelta index (keep numeric index too)
    signals = signals.set_index('timedelta')

    # Rename column to avoid confusion
    signals = signals.rename(columns={'index': 'idx'})

    print("Raw Signals:")
    print(signals)

    #Plotting
    fig, axes = plt.subplots(nrows=2, ncols=1)
    axes = axes.flatten()
    signals[0].plot(ax=axes[0])
    signals[1].plot(ax=axes[1])




.. image:: /_examples/Pre-Processing/images/sphx_glr_plot_SQI_pandas_002.png
    :alt: plot SQI pandas
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Raw Signals:
                                idx      0       1
    timedelta                                     
    0 days 00:00:00               0  36033  216524
    0 days 00:00:00.010000        1  40919  216470
    0 days 00:00:00.020000        2  45715  216415
    0 days 00:00:00.030000        3  50227  216364
    0 days 00:00:00.040000        4  54362  216379
    ...                         ...    ...     ...
    0 days 15:37:43.720000  5626372  31408  183755
    0 days 15:37:43.730000  5626373  31318  184002
    0 days 15:37:43.740000  5626374  31117  184296
    0 days 15:37:43.750000  5626375  30761  184554
    0 days 15:37:43.760000  5626376  30261  184828

    [5626377 rows x 3 columns]

    <AxesSubplot:xlabel='timedelta'>



.. GENERATED FROM PYTHON SOURCE LINES 109-110

Trimming the first and last 5 minutes

.. GENERATED FROM PYTHON SOURCE LINES 110-122

.. code-block:: default
   :lineno-start: 111


    #Defining the 5 minute offset
    offset = pd.Timedelta(minutes=5)

    #Indexes - adopted from example
    idxs = (signals.index > offset) & \
            (signals.index < signals.index[-1] - offset)

    #Trimming
    signals = signals[idxs]









.. GENERATED FROM PYTHON SOURCE LINES 123-128

.. code-block:: default
   :lineno-start: 124


    # RESAMPLE??
    # MISSING DATA INPUT??
    # TAPPERING??








.. GENERATED FROM PYTHON SOURCE LINES 129-130

Band-pass filtering

.. GENERATED FROM PYTHON SOURCE LINES 130-159

.. code-block:: default
   :lineno-start: 131


    '''
    Band-pass filtering can be adjusted, maybe use a lower low-pass
    cutoff frequency @15-17Hz

    '''
    #Band pass filtering function
    def bpf(signal):
        hp_filt_params = (1, 1) #(Cutoff Hz, order)
        lp_filt_params = (20, 4) #( Cutoff Hz, order)
        sampling_rate = 100
        filter = BandpassFilter(band_type='butter', fs=sampling_rate)
        filtered_signal = filter.signal_highpass_filter(signal, cutoff=hp_filt_params[0], order=hp_filt_params[1])
        filtered_signal = filter.signal_lowpass_filter(filtered_signal, cutoff=lp_filt_params[0], order=lp_filt_params[1])
        return filtered_signal

    #Band-pass filtered signals
    signals['0_bpf'] = bpf(signals[0])
    signals['1_bpf'] = bpf(signals[1])

    print('Raw and Filtered Signals:')
    print(signals)

    fig, axes = plt.subplots(nrows=2, ncols=1)
    axes = axes.flatten()
    signals['0_bpf'].plot(ax=axes[0])
    signals['1_bpf'].plot(ax=axes[1])





.. image:: /_examples/Pre-Processing/images/sphx_glr_plot_SQI_pandas_003.png
    :alt: plot SQI pandas
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Raw and Filtered Signals:
                                idx      0       1         0_bpf        1_bpf
    timedelta                                                                
    0 days 00:05:00.010000    30001  53180  184815    246.408656   -57.360381
    0 days 00:05:00.020000    30002  55406  184984   1526.842327  -332.244261
    0 days 00:05:00.030000    30003  57204  185278   4331.003662  -849.693981
    0 days 00:05:00.040000    30004  58558  185676   7695.138441 -1281.147905
    0 days 00:05:00.050000    30005  59446  186030  10104.482982 -1298.722393
    ...                         ...    ...     ...           ...          ...
    0 days 15:32:43.710000  5596371  15083  186186    942.030869    45.325519
    0 days 15:32:43.720000  5596372  13923  186422    708.195771    93.296871
    0 days 15:32:43.730000  5596373  12818  186662    542.754581   127.077955
    0 days 15:32:43.740000  5596374  11769  186807    442.131641   151.598399
    0 days 15:32:43.750000  5596375  10763  186899    402.889073   159.679506

    [5566375 rows x 5 columns]

    <AxesSubplot:xlabel='timedelta'>



.. GENERATED FROM PYTHON SOURCE LINES 160-161

SQI Functions Definition and Peak Detection

.. GENERATED FROM PYTHON SOURCE LINES 161-217

.. code-block:: default
   :lineno-start: 162


    def PeakDetection(x):
        detector = PeakDetector()
        peaks, troughs = detector.ppg_detector(x, 7) #6 and 7 work the best
        return peaks, troughs

    #Defining SQI Functions

    def snr(x):
        #Signal to noise ratio
        #needs raw signal
        return np.mean(sq.standard_sqi.signal_to_noise_sqi(x))

    def zcr(x):
        #Zero Crossing Rate
        #Needs filtered signal
        return 0.5 * np.mean(np.abs(np.diff(np.sign(x))))

    def mcr(x):
        #Mean Crossing Rate
        #needs raw signal
        return zcr(x - np.mean(x))

    def perfusion(x,y):
        return (np.max(y) - np.min(y)) / np.abs(np.mean(x)) * 100

    def correlogram(x):
        #Correlogram
        #Needs filtered signal
        return sq.rpeaks_sqi.correlogram_sqi(x)

    #Calculating peaks and troughs using peakdetector function for both filtered signals
    peak_list_0, trough_list_0 = PeakDetection(signals['0_bpf'])
    peak_list_1, trough_list_1 = PeakDetection(signals['1_bpf'])

    '''
    MSW values that are being calculated are too small, maybe peakdetectors need
    to be revisited?
    '''
    def msq(x,peaks):
        #Dynamic Time Warping
        #Requires Filtered Signal and peaks
         # Return
         return sq.standard_sqi.msq_sqi(x, peaks_1=peaks, peak_detect2=6)

    '''
    Below function is outputting an error, needs revisiting
    '''
    # def dtw(x,troughs):
    #     #Dynamic Time Warping
    #     #Requires Filtered Signal and troughs and template selection 0-3 (0-2 for PPG)
    #     # Per beat
    #     dtw_list = sq.standard_sqi.per_beat_sqi(sqi_func=sq.dtw_sqi, troughs=troughs, signal=x, taper=True, template_type=1)
    #     # Return mean and standard deviation
    #     return [np.mean(dtw_list), np.std(dtw_list)]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '\nBelow function is outputting an error, needs revisiting\n'



.. GENERATED FROM PYTHON SOURCE LINES 218-219

Function Computing SQIs

.. GENERATED FROM PYTHON SOURCE LINES 219-246

.. code-block:: default
   :lineno-start: 220


    def sqi_all(x,raw,filtered,peaks,troughs):
    
        #Computing  all SQIs using the functions above
    
        # Information
        dinfo = {
            'first': x.idx.iloc[0],
            'last': x.idx.iloc[-1],
            'skew': skew(x[raw]),
            'entropy': entropy(x[raw]),
            'kurtosis': kurtosis(x[raw]),
            'snr': snr(x[raw]),
            'mcr': mcr(x[raw]),
            'zcr': zcr(x[filtered]),
            'msq': msq(x[filtered],peaks),
            'perfusion': perfusion(x[raw], x[filtered]),
            'correlogram': correlogram(x[filtered]),
            #'dtw': dtw(x[filtered],troughs)
        }
        '''
        When using dtw an empty signal error is presented that
        needs fixing, not sure why it does that
        '''
        # Return
        return pd.Series(dinfo)








.. GENERATED FROM PYTHON SOURCE LINES 247-248

Calculating SQIs for both signals 0 = Pleth and 1 = IR_ADC

.. GENERATED FROM PYTHON SOURCE LINES 248-267

.. code-block:: default
   :lineno-start: 249


    sqis_0 = signals.groupby(pd.Grouper(freq='30s')).apply(lambda x: sqi_all(x, 0,'0_bpf', peak_list_0, trough_list_0))
    sqis_1 = signals.groupby(pd.Grouper(freq='30s')).apply(lambda x: sqi_all(x, 1,'1_bpf', peak_list_1, trough_list_1))

    #Displaying the SQIs per signal
    print("SQIs Signal 0 (Pleth):")
    sqis_0
    print(sqis_0)

    print("SQIs Signal 1 (IR_ADC):")
    sqis_1
    print(sqis_1)
    sqis_1 = sqis_1.drop(['first','last'], axis = 1)


    # Add window id to identify point of shock more easily
    sqis_1['w'] = np.arange(sqis_1.shape[0])






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    d:\files\desktop\dissertation icl\env\lib\site-packages\statsmodels\tsa\stattools.py:667: FutureWarning: fft=True will become the default after the release of the 0.12 release of statsmodels. To suppress this warning, explicitly set fft=False.
      warnings.warn(
    SQIs Signal 0 (Pleth):
                              first     last      skew   entropy  ...       zcr       msq   perfusion                                        correlogram
    timedelta                                                     ...                                                                                   
    0 days 00:05:00.010000    30001    33000  0.011563  7.889833  ...  0.026676  0.000453  131.514564  [75, 150, 225, 0.9314065557422081, 0.834979955...
    0 days 00:05:30.010000    33001    36000 -0.132401  7.869577  ...  0.026676  0.000037  130.516948  [74, 148, 223, 0.9387718726284522, 0.866959689...
    0 days 00:06:00.010000    36001    39000 -0.124814  7.857955  ...  0.027009  0.000000  136.711744  [75, 150, 225, 0.9292757814937312, 0.814518481...
    0 days 00:06:30.010000    39001    42000  0.087626  7.863540  ...  0.027342  0.000007  135.201781  [75, 150, 225, 0.9390128411208709, 0.869965651...
    0 days 00:07:00.010000    42001    45000 -0.058097  7.855827  ...  0.026676  0.000000  139.143295  [74, 149, 224, 0.9289524246136973, 0.828885495...
    ...                         ...      ...       ...       ...  ...       ...       ...         ...                                                ...
    0 days 15:30:30.010000  5583001  5586000  0.144338  7.847808  ...  0.031010  0.000015  145.800649  [37, 74, 110, -0.3896969995477288, 0.940822237...
    0 days 15:31:00.010000  5586001  5589000  0.128500  7.874039  ...  0.030343  0.000015  137.206158  [36, 76, 111, -0.3935314528998662, 0.942263483...
    0 days 15:31:30.010000  5589001  5592000 -0.003407  7.861910  ...  0.027676  0.000000  131.726227  [36, 76, 111, -0.4074861857015019, 0.958215239...
    0 days 15:32:00.010000  5592001  5595000  0.113608  7.865455  ...  0.032011  0.000015  142.104603  [37, 75, 110, -0.3809337047215236, 0.939346033...
    0 days 15:32:30.010000  5595001  5596375  0.017611  7.092237  ...  0.027656  0.000000  133.237013  [38, 75, 113, -0.35109335503478545, 0.92491394...

    [1856 rows x 11 columns]
    SQIs Signal 1 (IR_ADC):
                              first     last      skew   entropy  ...       zcr       msq  perfusion                                        correlogram
    timedelta                                                     ...                                                                                  
    0 days 00:05:00.010000    30001    33000  0.254305  8.004757  ...  0.026676  0.000323   6.674922  [75, 150, 225, 0.9087943183455219, 0.789911832...
    0 days 00:05:30.010000    33001    36000  0.562860  8.006121  ...  0.027009  0.000013   5.596514  [74, 148, 222, 0.9181757635079706, 0.827234373...
    0 days 00:06:00.010000    36001    39000  0.485952  8.005997  ...  0.026676  0.000008   6.091551  [75, 150, 224, 0.9094662436276878, 0.775536874...
    0 days 00:06:30.010000    39001    42000 -0.199789  8.005720  ...  0.026676  0.000021   4.305403  [75, 150, 225, 0.9134459565030647, 0.822742844...
    0 days 00:07:00.010000    42001    45000  0.416908  8.006205  ...  0.027009  0.000000   4.244410  [74, 149, 223, 0.913985197557938, 0.7969092381...
    ...                         ...      ...       ...       ...  ...       ...       ...        ...                                                ...
    0 days 15:30:30.010000  5583001  5586000  0.596729  8.005492  ...  0.027009  0.000008   4.864304  [31, 74, 105, -0.38335045092285824, 0.93538125...
    0 days 15:31:00.010000  5586001  5589000  0.263594  8.005904  ...  0.027009  0.000008   4.277679  [76, 151, 226, 0.9362344077635872, 0.847005080...
    0 days 15:31:30.010000  5589001  5592000  0.187485  8.006171  ...  0.027009  0.000004   4.790734  [76, 152, 228, 0.9537593069974436, 0.889395196...
    0 days 15:32:00.010000  5592001  5595000 -0.217683  8.006045  ...  0.028009  0.000004   4.068148  [74, 149, 223, 0.9298975484283258, 0.810992077...
    0 days 15:32:30.010000  5595001  5596375 -0.133055  7.226034  ...  0.026929  0.000000   4.373367  [75, 150, 226, 0.9176870729126787, 0.846958319...

    [1856 rows x 11 columns]




.. GENERATED FROM PYTHON SOURCE LINES 268-269

Final Formatting into a single DataFrame and Saving into a .csv file

.. GENERATED FROM PYTHON SOURCE LINES 269-287

.. code-block:: default
   :lineno-start: 270


    #Merging SQIs of different signals from the same record (Pleth and IR_ADC) 
    Signal_SQIs = sqis_0.merge(sqis_1, on='timedelta', suffixes=('_0', '_1'))

    #Automatically fetching the study_no from the filename and including it in the DataFrame
    Signal_SQIs['study_no'] = filename.split()[0][-8:]
    print(Signal_SQIs)

    # Saving the SQIs to a CSV file
    Signal_SQIs.to_csv(r'..\..\..\..\OUCRU\01NVa_Dengue\Adults\01NVa-003-2001\SQI.csv')

    '''
    #Running Some Abstract Checks to Verify Results etc.

    print(perfusion(signals[0][0:3000], signals['0_bpf'][0:3000]))

    '''





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

                              first     last    skew_0  entropy_0  ...  perfusion_1                                      correlogram_1     w  study_no
    timedelta                                                      ...                                                                                
    0 days 00:05:00.010000    30001    33000  0.011563   7.889833  ...     6.674922  [75, 150, 225, 0.9087943183455219, 0.789911832...     0  003-2001
    0 days 00:05:30.010000    33001    36000 -0.132401   7.869577  ...     5.596514  [74, 148, 222, 0.9181757635079706, 0.827234373...     1  003-2001
    0 days 00:06:00.010000    36001    39000 -0.124814   7.857955  ...     6.091551  [75, 150, 224, 0.9094662436276878, 0.775536874...     2  003-2001
    0 days 00:06:30.010000    39001    42000  0.087626   7.863540  ...     4.305403  [75, 150, 225, 0.9134459565030647, 0.822742844...     3  003-2001
    0 days 00:07:00.010000    42001    45000 -0.058097   7.855827  ...     4.244410  [74, 149, 223, 0.913985197557938, 0.7969092381...     4  003-2001
    ...                         ...      ...       ...        ...  ...          ...                                                ...   ...       ...
    0 days 15:30:30.010000  5583001  5586000  0.144338   7.847808  ...     4.864304  [31, 74, 105, -0.38335045092285824, 0.93538125...  1851  003-2001
    0 days 15:31:00.010000  5586001  5589000  0.128500   7.874039  ...     4.277679  [76, 151, 226, 0.9362344077635872, 0.847005080...  1852  003-2001
    0 days 15:31:30.010000  5589001  5592000 -0.003407   7.861910  ...     4.790734  [76, 152, 228, 0.9537593069974436, 0.889395196...  1853  003-2001
    0 days 15:32:00.010000  5592001  5595000  0.113608   7.865455  ...     4.068148  [74, 149, 223, 0.9298975484283258, 0.810992077...  1854  003-2001
    0 days 15:32:30.010000  5595001  5596375  0.017611   7.092237  ...     4.373367  [75, 150, 226, 0.9176870729126787, 0.846958319...  1855  003-2001

    [1856 rows x 22 columns]

    "\n#Running Some Abstract Checks to Verify Results etc.\n\nprint(perfusion(signals[0][0:3000], signals['0_bpf'][0:3000]))\n\n"



.. GENERATED FROM PYTHON SOURCE LINES 288-291

.. code-block:: default
   :lineno-start: 288

    '''
    Discarding Process to be implemented after quality check.
    '''




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '\nDiscarding Process to be implemented after quality check.\n'




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  50.003 seconds)


.. _sphx_glr_download__examples_Pre-Processing_plot_SQI_pandas.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_SQI_pandas.py <plot_SQI_pandas.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_SQI_pandas.ipynb <plot_SQI_pandas.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
